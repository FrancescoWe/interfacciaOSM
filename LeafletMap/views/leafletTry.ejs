<!DOCTYPE html>
<html>
<head>
    <!--<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>-->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
    integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
    crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
            integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
            crossorigin="">
    </script>
    <script src="https://requirejs.org/docs/release/2.3.5/minified/require.js"></script>


    <style>
        #map {position: absolute; top: 0; bottom: 0; left: 0; right:0}
    </style>
</head>
<body>
    <div id = "map"> </div>
    <script>
        async function getNode(){
            await fetch("/api/mapRoute", {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                method : "GET"
            })
            .then((resp) => resp.json())
            .then(function(data) {
                if (data.error != null) {
                    alert("ERROR,\n" + data.error);
                    console.log("ERROR");
                    return false;
                } else { 
                    //console.log("everything working...");
                    //console.log("WHAAAAAAAA" + data);
                    getLatitudeLongitude(data)
                    getQuestion(data, "node", marker);
                    return true;
                } 
            }).catch(error => console.error(error));
            return false;
        }

        async function getWay(){
            await fetch("/api/mapRoute/way", {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                method: "GET"
            })
            .then((resp) => resp.json())
            .then(function(data){
                if(data.error != null){
                    alert("Error\n" +data.error);
                    console.log("ERROR");
                    return false;
                }else{
                    //data = jQuery.parseJSON(data);
                    let jsonData = JSON.parse(data);
                    console.log(jsonData);
                    //console.log(data.geometry.coordinates[0][0]);
                    mygeoJson = L.geoJSON(jsonData).addTo(map);
                    map.setView([jsonData.geometry.coordinates[0][1], jsonData.geometry.coordinates[0][0]],20)
                    getQuestion(data, "way", mygeoJson);
                    return true;
                }
            }).catch(error => console.error(error));
            return false;
        }

        function getLatitudeLongitude(jsonFile){
            //console.log(jsonFile);
            const obj = JSON.parse(jsonFile);
            //console.log(obj.geometry.coordinates);
            longitude = obj.geometry.coordinates[0];
            latitude = obj.geometry.coordinates[1];
            marker.setLatLng([latitude,longitude]);
            map.setView([latitude,longitude], 20);
        }

        async function getQuestion(jsonFile, node_or_way, element){
            const obj = JSON.parse(jsonFile);
            console.log(obj.properties.id);
            console.log(obj.properties.type);
            console.log(obj);
            await fetch("/api/mapRoute/questions",{
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                method: "POST",
                body: JSON.stringify({
                    "id" : obj.properties.id,
                    "type" : obj.properties.type
                })
            })
            .then((resp) => resp.json())
            .then(function(data){
                if(data.error!=null){
                    alert("Error,\n" + data.error);
                    console.log("Error");
                    return false;
                }else{
                    console.log(data)
                    console.log(data.length);
                    let myQuestions = [];
                    let pointsTaken = [];
                    //let myQuestion = data[0];
                    for(var i=0;i<data.length;i++){
                            console.log("trying..." + data[i]);
                            myQuestions.push(data[i][1]);
                            pointsTaken.push(data[i][8]);
                    }
                    //NOW TODO FOR EACH ELEMENT IN MYQUESTIONS I HAVE TO CREATE A QUESTION.
                    element.addEventListener('click', function(){
                        let text;
                        for(var i=0;i<myQuestions.length;i++){
                            let question = prompt(myQuestions[i], "");
                            //createForm();
                            if(question == null || question ==""){
                            //User leaves prmpt blank
                            }else{
                                //console.log("ANSWER ISSSSSSSSS",question);
                                //User puts an input in the field
                                //LA CHIAMATA ALLA GAME ENGINE CON I DATI INSERITI DAL GIOCATORE.
                                //DEVO MANDARE DOMANDA, RISPOSTA, ELEMENTO A CUI SI RISPONDE, PUNTEGGIO CHE SI OTTIENE
                                validatePoint();
                                //callGameEngine(myQuestions[i],question,data[i],pointsTaken[i]); //FOR PINANSWERCOMPLETED
                                //deletePlayer()
                            }
                        }
                        //createPopup(data);
                    },false);
                }     
            }).catch(error => console.error(error));
            return false;
        };

        async function deletePlayer(){
            await fetch("/api/mapRoute/deleteUser", {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                method: "DELETE",
            }).then((resp) => resp.json())
            .then(function (data) {
            }).catch(error => console.log("WHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + error))
            return false;
        }

        async function callGameEngine(myQuestion, answer, myObject, point){
            let playerId = "ID11";
            await fetch("/api/mapRoute/engine", {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                method: "POST",
                body: JSON.stringify({
                    "question" : myQuestion,
                    "answer" : answer,
                    "element" : myObject,
                    "points" : point,
                    "playerId" : playerId
                })
            })
            .then((resp) => resp.json())
            .then(function(data){
                if(data.error != null){
                    alert("Error\n" +data.error);
                    console.log("ERROR");
                    return false;
                }else{
                    //data = jQuery.parseJSON(data);
                    let jsonData = JSON.parse(data);
                    console.log(jsonData);
                    //console.log(data.geometry.coordinates[0][0]);
                    return true;
                }
            }).catch(error => console.error(error));
            return false;
        }

        async function validatePoint(){
            let playerId = "ID11";
            await fetch("/api/mapRoute/validation", {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                method: "POST",
                body: JSON.stringify({
                    "playerId" : playerId
                })
            })
            .then((resp) => resp.json())
            .then(function(data){
                if(data.error != null){
                    alert("Error\n" +data.error);
                    console.log("ERROR");
                    return false;
                }else{
                    //data = jQuery.parseJSON(data);
                    let jsonData = JSON.parse(data);
                    console.log(jsonData);
                    //console.log(data.geometry.coordinates[0][0]);
                    return true;
                }
            }).catch(error => console.error(error));
            return false;
        }
        /*function createForm(){
            var form = document.createElement("form");

            var FN = document.createElement("input");
            FN.setAttribute("type", "text");
            FN.setAttribute("name", "FullName");
            FN.setAttribute("placeholder", "Full Name");
            //map.style.zIndex = 1;

            form.appendChild(FN);
            document.body.prepend(form);
            //document.getElementsByTagName("body")[0].prepend(form);
        }*/

        const map = L.map('map').setView([0,0], 1);
        const marker = L.marker([0,0]).addTo(map);
        const attribution = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';
        const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'
        const tiles = L.tileLayer(tileUrl, { attribution });
        tiles.addTo(map);
        
        //getWay();
        getNode();
        
        function createPopup(data){
            var popup = open("", "Popup", "width=300,height=200");
            var txtOk = popup.document.createElement("FORM");
            for(let i=0;i<data.length;i++){
                var myText = popup.document.createElement("a");
                myText.innerHtml = data[i];
                console.log(myText);
                var myInput = document.createElement("input");
                myInput.setAttribute("type", "text");
                popup.document.body.appendChild(myText);
                popup.document.body.appendChild(myInput);
            }

            var FN = document.createElement("input");
            FN.setAttribute("type", "text");
            FN.setAttribute("name", "FullName");
            FN.setAttribute("placeholder", "Full Name");
            txtOk.appendChild(FN);

            var aOk = popup.document.createElement("a");
            aOk.innerHTML = "Click here";

            popup.document.body.appendChild(txtOk);
            popup.document.body.appendChild(aOk);
        }
        
    </script>
</body>
</html>