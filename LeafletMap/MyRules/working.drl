package eu.trentorise.game.model
import eu.trentorise.game.notification.BadgeNotification;
import eu.trentorise.game.core.Utility;
import java.util.Map
import java.util.ArrayList

declare AlreadyLevelUp
end


rule "first-answer"
when
  Action(id == 'PinAnswerCompleted')
  InputData(
    $solution: data["solution"]
  )
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'green leaves', badgeEarned not contains '1-point-green')
  $customData : CustomData(this["level"] == null) 
  not AlreadyLevelUp()
then
  Map solutionMap = ((Map)$solution);
  String  punti = (String)solutionMap.get("points"); 

  Double puntiDouble = Double.parseDouble(punti);
  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + puntiDouble);}
  modify($PointsScore) {setScore($PointsScore.getScore() + puntiDouble);} 
  
  $customData.put("level_up_points", punti);
  $customData.put("level", "1");

  $bc.getBadgeEarned().add('1-point-green');
  update( $bc );

  update($customData)
  insert(new AlreadyLevelUp());
end


//ALL THE OTHER LEVELS
rule "answer-x"
when
	Action( id == 'PinAnswerCompleted')
  	InputData(
        $solution : data["solution"];
 )
 $bc : BadgeCollectionConcept(name == 'beginner badge')
 $bc_expert : BadgeCollectionConcept(name == 'expert badge')
 //$bc_professional : BadgeCollectionConcept(name == 'professional badge')
 $GoldCoinsScore : PointConcept(name == "GoldCoins");
 $PointsScore : PointConcept(name == "AccumulatedPoints");
 $customData : CustomData(this["level"] >= 0); 
 not AlreadyLevelUp()
then 

  Map solutionMap = ((Map)$solution);
  String myPoints = (String)solutionMap.get("points"); 
  Double punti = Double.parseDouble(myPoints); 


 // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  
  
  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
  }

  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);


  update($customData);
  insert(new AlreadyLevelUp());

end

rule "get-beginner-badge"
	when
      $customData : CustomData(this["level"] == 5); 
	    $bc : BadgeCollectionConcept(name == "beginner badge", badgeEarned not contains '1-badge-earned')
	    Game( $gameId: id)
	    Player( $playerId : id)
	then
		$bc.getBadgeEarned().add('1-badge-earned');
		update( $bc );
end
