package eu.trentorise.game.model
import eu.trentorise.game.notification.BadgeNotification;
import eu.trentorise.game.core.Utility;
import java.util.Map
import java.util.ArrayList

declare AlreadyLevelUp
end


rule "first-answer"
when
  Action(id == 'PinAnswerCompleted')
  InputData(
    $solution: data["solution"]
  )
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'green leaves', badgeEarned not contains '1-point-green')
  $customData : CustomData(this["level"] == null) 
  not AlreadyLevelUp()
then
  Map solutionMap = ((Map)$solution);
  String  punti = (String)solutionMap.get("points"); 

  Double puntiDouble = Double.parseDouble(punti);
  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + puntiDouble);}
  modify($PointsScore) {setScore($PointsScore.getScore() + puntiDouble);} 
  
  $customData.put("level_up_points", punti);
  $customData.put("level", "1");

  $bc.getBadgeEarned().add('1-point-green');
  update( $bc );

  update($customData)
  insert(new AlreadyLevelUp());
end


//ALL THE OTHER LEVELS
rule "answer-x"
when
	Action( id == 'PinAnswerCompleted')
  	InputData(
        $solution : data["solution"];
 )
 $bc : BadgeCollectionConcept(name == 'beginner badge')
 $bc_expert : BadgeCollectionConcept(name == 'expert badge')
 $bc_professional : BadgeCollectionConcept(name == 'professional badge')
 $GoldCoinsScore : PointConcept(name == "GoldCoins");
 $PointsScore : PointConcept(name == "AccumulatedPoints");
 $customData : CustomData(this["level"] >= 0); 
 not AlreadyLevelUp()
then 

  Map solutionMap = ((Map)$solution);
  String myPoints = (String)solutionMap.get("points"); 
  Double punti = Double.parseDouble(myPoints); 


 // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  
  
  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
  }
  i = Integer.parseInt(actualLevel);
  //if player level is 5 and he has not earned a beginner badge, give him a beginner badge
  if(i == 5 && $bc.getBadgeEarned() not contains '1-badge-earned'){
    $bc.getBadgeEarned().add('1-badge-earned');
    update($bc);
  }
  //if player level is 10 and he has not earned an expert badge, give him an expert badge
  if(i== 10 && $bc_expert.getBadgeEarned() not contains '1-badge-earned'){
    $bc_expert.getBadgeEarned().add('1-badge-earned');
    update($bc_expert);
  }
  //if player level is 20 and he has not earned a professional badge, give him a professional badge
  if(i==20 && bc_professional.getBadgeEarned() not contains '1-badge-earned'){
    $bc_professional.getBadgeEarned().add()('1-badge-earned');
    update($bc_professional);
  }


  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);


  update($customData);
  insert(new AlreadyLevelUp());

end

//RULE FOR FIRST VALIDATION
rule "validate-first-point"
when
  Action(id == 'ValidatePoint')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'validator badge', badgeEarned not contains '1-badge-earned')
  $customData : CustomData(this["level"] >= 0)
  not AlreadyLevelUp()
then
  Double punti = 1.0;
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  

  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
  }

  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  $customData.put("validator_points", 1);

  $bc.getBadgeEarned().add('1-badge-earned');
  update( $bc );

  update($customData)
  insert(new AlreadyLevelUp());

end


//RULE FOR ALL THE OTHER VALIDATIONS
rule 'validate-point'
when
  Action(id == 'ValidatePoint')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'validator', badgeEarned contains '1-badge-earned')
  $bc_validator : BadgeCollectionConcept(name == 'expert validator')
  not AlreadyLevelUp()
then
  // update the counter
  Double punti = 1.0;
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  

  String actualValidation = (String)$customData.get("validator-points");
  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer actualValidation = Integer.parseInt(actualValidation);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;
  actualValidation = actualValidation + 1;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
  }
  i = Integer.parseInt(actualLevel);
  //if player level is 5 and he has not earned a beginner badge, give him a beginner badge
  if(i == 5 && $bc.getBadgeEarned() not contains '1-badge-earned'){
    $bc.getBadgeEarned().add('1-badge-earned');
    update($bc);
  }
  //if player level is 10 and he has not earned an expert badge, give him an expert badge
  if(i== 10 && $bc_expert.getBadgeEarned() not contains '1-badge-earned'){
    $bc_expert.getBadgeEarned().add('1-badge-earned');
    update($bc_expert);
  }
  //if player level is 20 and he has not earned a professional badge, give him a professional badge
  if(i==20 && bc_professional.getBadgeEarned() not contains '1-badge-earned'){
    $bc_professional.getBadgeEarned().add()('1-badge-earned');
    update($bc_professional);
  }

  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);

  //check if he made 20 points to earn a badge
  if(actualValidation == 20){
    bc_validator().add('1-badge-earned');
    update( $bc_validator);
  }
  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  String newValidationPoints = String.valueOf(actualValidation);
  $customData.put("validator-points", newValidationPoints);

  update($customData)
  insert(new AlreadyLevelUp());
end

//RULE INSERT FIRST POINT
rule "insert-first-point"
when
  Action(id == 'PointInserted')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'contributor', badgeEarned not contains '1-badge-earned')
  $customData : CustomData(this["level"] >= 0)
  not AlreadyLevelUp()
then
  Double punti = 1.0;
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  

  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
  }
  i = Integer.parseInt(actualLevel);
  //if player level is 5 and he has not earned a beginner badge, give him a beginner badge
  if(i == 5 && $bc.getBadgeEarned() not contains '1-badge-earned'){
    $bc.getBadgeEarned().add('1-badge-earned');
    update($bc);
  }
  //if player level is 10 and he has not earned an expert badge, give him an expert badge
  if(i== 10 && $bc_expert.getBadgeEarned() not contains '1-badge-earned'){
    $bc_expert.getBadgeEarned().add('1-badge-earned');
    update($bc_expert);
  }
  //if player level is 20 and he has not earned a professional badge, give him a professional badge
  if(i==20 && bc_professional.getBadgeEarned() not contains '1-badge-earned'){
    $bc_professional.getBadgeEarned().add()('1-badge-earned');
    update($bc_professional);
  }

  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  
  $customData.put("contributor_points", 1);

  $bc.getBadgeEarned().add('1-badge-earned');
  update( $bc );

  update($customData)
  insert(new AlreadyLevelUp());

end

//RULE INSERT POINTS AFTER THE FIRST ONE
rule "insert-point"
when
  Action(id == 'PointInserted')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'contributor', badgeEarned contains '1-badge-earned')
  $bc_contributor : BadgeCollectionConcept(name == 'expert contributor')
  not AlreadyLevelUp()
then
  // update the counter
  Double punti = 3.0;
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  

  String actualContribution = (String)$customData.get("contributor-points");
  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer actualContribution = Integer.parseInt(actualContribution);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;
  actualContribution = actualContribution + 1;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
  }
  i = Integer.parseInt(actualLevel);
  //if player level is 5 and he has not earned a beginner badge, give him a beginner badge
  if(i == 5 && $bc.getBadgeEarned() not contains '1-badge-earned'){
    $bc.getBadgeEarned().add('1-badge-earned');
    update($bc);
  }
  //if player level is 10 and he has not earned an expert badge, give him an expert badge
  if(i== 10 && $bc_expert.getBadgeEarned() not contains '1-badge-earned'){
    $bc_expert.getBadgeEarned().add('1-badge-earned');
    update($bc_expert);
  }
  //if player level is 20 and he has not earned a professional badge, give him a professional badge
  if(i==20 && bc_professional.getBadgeEarned() not contains '1-badge-earned'){
    $bc_professional.getBadgeEarned().add()('1-badge-earned');
    update($bc_professional);
  }

  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);

  //check if he made 20 points to earn a badge
  if(actualContribution== 20){
    bc_contributor().add('1-badge-earned');
    update( $bc_contributorr);
  }
  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  String newContributionPoints = String.valueOf(actualContribution);
  $customData.put("contributor-points", newContributionnPoints);

  update($customData)
  insert(new AlreadyLevelUp());
end