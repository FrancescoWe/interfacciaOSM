package eu.trentorise.game.model
import eu.trentorise.game.notification.BadgeNotification;
import eu.trentorise.game.core.Utility;
import java.util.Map
import java.util.ArrayList

declare AlreadyLevelUp
end


rule "first-answer"
when
  Action(id == 'PinAnswerCompleted')
  InputData(
    $solution: data["solution"]
  )
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $bc : BadgeCollectionConcept(name ==  'green leaves', badgeEarned not contains '1-point-green')
  $customData : CustomData(this["level"] == null) 
  not AlreadyLevelUp()
then
  Map solutionMap = ((Map)$solution);
  String  punti = (String)solutionMap.get("points"); 

  Double puntiDouble = Double.parseDouble(punti);
  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + puntiDouble);}
  modify($PointsScore) {setScore($PointsScore.getScore() + puntiDouble);} 
 
  $customData.put("level_up_points", punti);
  $customData.put("level", "1");
  $customData.put("points_inserted","0");


  $bc.getBadgeEarned().add('1-point-green');
  update( $bc );

  update($customData)
  insert(new AlreadyLevelUp());
end

//ALL THE OTHER LEVELS
rule "answer-x"
when
	Action( id == 'PinAnswerCompleted')
  	InputData(
        $solution : data["solution"];
 )
 $GoldCoinsScore : PointConcept(name == "GoldCoins");
 $PointsScore : PointConcept(name == "AccumulatedPoints");
 $customData : CustomData(this["level"] >= 0); 
 not AlreadyLevelUp()
then 

  Map solutionMap = ((Map)$solution);
  String myPoints = (String)solutionMap.get("points"); 
  Double punti = Double.parseDouble(myPoints); 


 // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}  
  
  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints); 
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);

  Double pointThreshold = myLevel*10;
  levelPoints = levelPoints + punti;

  //LEVEL UP
  if(levelPoints >= pointThreshold){
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    //levelPoints = Double.parseDouble(levelPoints);
    $customData.put("level", newLevelString);
    update($customData);
    actualLevel = (String)$customData.get("level");
    i=newLevel;
  }
  //i = Integer.parseInt(actualLevel);


  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);


  update($customData);
  insert(new AlreadyLevelUp());

end




//ALL THE VALIDATIONS WITH ALREADY OBTAINED BADGE
rule "validation-answer-until-level-x"
when
  Action(id == 'ValidatePoint')
  $bc : BadgeCollectionConcept(name == "validator badge", badgeEarned contains '1-badge-earned')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $customData : CustomData(this["level"] >=5)
 
  not AlreadyLevelUp()
then

Double  punti = 1.0;



  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}

  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints);
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);


  Double pointThreshold = myLevel*10.0;
  levelPoints = levelPoints + punti;

  utils.log("threshold: "+pointThreshold);
  utils.log("punti di livello: "+levelPoints );

  //LEVEL UP
  if(levelPoints >= pointThreshold){
   utils.log("apply \' threshold superato\'");
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    $customData.put("level", newLevelString);
    utils.log("Nuovo Livello: "+newLevelString);
    update($customData);
  }
 
  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  utils.log("punti di livello: "+newLevelPoints);

  String actualValidations = (String)$customData.get("answers_validated");
  Integer myValidations = Integer.parseInt(actualValidations);
  myValidations= myValidations + 1;
  String toValidate = String.valueOf(myValidations)
  $customData.put("answers_validated", toValidate);

  update($customData);
  insert(new AlreadyLevelUp());
 
 
end


//ALL THE OTHER VALIDATIONS WITH NO BADGE
rule "validation-answer-until-level-x-no-badge"
when
  Action(id == 'ValidatePoint')
  $bc : BadgeCollectionConcept(name == "validator badge", badgeEarned not contains '1-badge-earned')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $customData : CustomData(this["level"] >=5)
 
  not AlreadyLevelUp()
then

Double  punti = 1.0;



  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}

  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints);
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);


  Double pointThreshold = myLevel*10.0;
  levelPoints = levelPoints + punti;

  utils.log("threshold: "+pointThreshold);
  utils.log("punti di livello: "+levelPoints );

  //LEVEL UP
  if(levelPoints >= pointThreshold){
   utils.log("apply \' threshold superato\'");
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    $customData.put("level", newLevelString);
    utils.log("Nuovo Livello: "+newLevelString);
    update($customData);
  }
 
  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  utils.log("punti di livello: "+newLevelPoints);
  $customData.put("answers_validated", "1");
  update($customData)

  
  $bc.getBadgeEarned().add('1-badge-earned');
  update($bc);

  update($customData);
  insert(new AlreadyLevelUp());
 
 
end


//ALL THE INSERTIONS WITH ALREADY OBTAINED BADGE
rule "insert-answer-until-level-x"
when
  Action(id == 'PointInserted')
  $bc : BadgeCollectionConcept(name == "contributor", badgeEarned contains '1-badge-earned')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $customData : CustomData(this["level"] >=5 this["points_inserted"]>=0)
  not AlreadyLevelUp()
then

Double  punti = 3.0;



  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}

  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints);
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);


  Double pointThreshold = myLevel*10.0;
  levelPoints = levelPoints + punti;

  utils.log("threshold: "+pointThreshold);
  utils.log("punti di livello: "+levelPoints );

  //LEVEL UP
  if(levelPoints >= pointThreshold){
   utils.log("apply \' threshold superato\'");
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    $customData.put("level", newLevelString);
    utils.log("Nuovo Livello: "+newLevelString);
    update($customData);
  }
 
  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  utils.log("punti di livello: "+newLevelPoints);

  //update custom data point-inserted
  String actualPointsInserted = (String)$customData.get("points_inserted");
  Integer myinserts = Integer.parseInt(actualPointsInserted);
  myinserts = myinserts + 1;
  String toInsert = String.valueOf(myinserts)
  $customData.put("points_inserted", toInsert);

  update($customData);
  insert(new AlreadyLevelUp());
 
 
end


//ALL THE OTHER INSERTIONS WITHOUT OBRAINED BADGE
rule "insert-point-until-level-x-no-badge"
when
  Action(id == 'PointInserted')
  $bc : BadgeCollectionConcept(name == "contributor", badgeEarned not contains '1-badge-earned')
  $GoldCoinsScore : PointConcept(name == "GoldCoins")
  $PointsScore : PointConcept(name == "AccumulatedPoints")
  $customData : CustomData(this["level"] >=5 && this["points_inserted"] == null)
 
  not AlreadyLevelUp()
then

Double  punti = 3.0;



  // update the counter
  modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
  modify($PointsScore) {setScore($PointsScore.getScore() + punti);}

  String actualLevel = (String)$customData.get("level");  
  String actualPoints = (String)$customData.get("level_up_points");
  Double levelPoints = Double.parseDouble(actualPoints);
  Double myLevel = Double.parseDouble(actualLevel);
  Integer i = Integer.parseInt(actualLevel);


  Double pointThreshold = myLevel*10.0;
  levelPoints = levelPoints + punti;

  utils.log("threshold: "+pointThreshold);
  utils.log("punti di livello: "+levelPoints );

  //LEVEL UP
  if(levelPoints >= pointThreshold){
   utils.log("apply \' threshold superato\'");
    Integer newLevel = i + 1;
    String newLevelString = String.valueOf(newLevel);
    levelPoints = levelPoints - pointThreshold;
    $customData.put("level", newLevelString);
    utils.log("Nuovo Livello: "+newLevelString);
    update($customData);
  }
 
  String newLevelPoints = String.valueOf(levelPoints);
  $customData.put("level_up_points", newLevelPoints);
  utils.log("punti di livello: "+newLevelPoints);

  $customData.put("points_inserted", "1");
  update($customData)

  $bc.getBadgeEarned().add('1-badge-earned');
  update($bc);

  update($customData);
  insert(new AlreadyLevelUp());
 
 
end





// RULES FOR LEVELS
rule "beginner_level"
    salience -1000
    when
      $customData : CustomData(this["level"] ==5)
	 $bc : BadgeCollectionConcept(name == "beginner badge", badgeEarned not contains '1-badge-earned')
	 Game( $gameId: id)
	Player( $playerId : id)
    then
	utils.log("apply \'1-badge-earned\'");
	$bc.getBadgeEarned().add('1-badge-earned');
	//insert( new BadgeNotification($gameId,$playerId,'10-point-green'));
	update( $bc );
end

rule "expert_level"
    salience -1000
    when
        $customData : CustomData(this["level"] ==10)
        $bc : BadgeCollectionConcept(name == "expert badge", badgeEarned not contains '1-badge-earned')
	Game( $gameId: id)
	Player( $playerId : id)
    then
	utils.log("apply \'1-badge-earned\'");
	$bc.getBadgeEarned().add('1-badge-earned');
	//insert( new BadgeNotification($gameId,$playerId,'10-point-green'));
	update( $bc );
end

rule "professional_level"
    salience -1000
    when
        $customData : CustomData(this["level"] ==20)
	$bc : BadgeCollectionConcept(name == "professional badge", badgeEarned not contains '1-badge-earned')
	Game( $gameId: id)
	Player( $playerId : id)
    then
	utils.log("apply \'1-badge-earned\'");
	$bc.getBadgeEarned().add('1-badge-earned');
	//insert( new BadgeNotification($gameId,$playerId,'10-point-green'));
	update( $bc );
end

rule "expert_validator"
    salience -1000
    when
        $customData : CustomData(this["answers_validated"] ==20)
	$bc : BadgeCollectionConcept(name == "expert validator badge", badgeEarned not contains '1-badge-earned')
	Game( $gameId: id)
	Player( $playerId : id)
    then
	utils.log("apply \'1-badge-earned\'");
	$bc.getBadgeEarned().add('1-badge-earned');
	//insert( new BadgeNotification($gameId,$playerId,'10-point-green'));
	update( $bc );
end

rule "expert_contributor"
    salience -1000
    when
        $customData : CustomData(this["points_inserted"] ==20)
	$bc : BadgeCollectionConcept(name == "expert contributor", badgeEarned not contains '1-badge-earned')
	Game( $gameId: id)
	Player( $playerId : id)
    then
	utils.log("apply \'1-badge-earned\'");
	$bc.getBadgeEarned().add('1-badge-earned');
	//insert( new BadgeNotification($gameId,$playerId,'10-point-green'));
	update( $bc );
end



rule "five-validations-without-badge"
    when
        Action(id == 'GetsValidatedFiveTimes')
        $bc : BadgeCollectionConcept(name == "trusted contributor", badgeEarned not contains '1-badge-earned')
        $GoldCoinsScore : PointConcept(name == "GoldCoins")
        $PointsScore : PointConcept(name == "AccumulatedPoints")
        $customData : CustomData(this["level"] >=5)
 
        not AlreadyLevelUp()
    then

      Double punti = 5.0
      modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
      modify($PointsScore) {setScore($PointsScore.getScore() + punti);}
      String actualLevel = (String)$customData.get("level");  
      String actualPoints = (String)$customData.get("level_up_points");
      Double levelPoints = Double.parseDouble(actualPoints);
      Double myLevel = Double.parseDouble(actualLevel);
      Integer i = Integer.parseInt(actualLevel);


      Double pointThreshold = myLevel*10.0;
      levelPoints = levelPoints + punti;

      utils.log("threshold: "+pointThreshold);
      utils.log("punti di livello: "+levelPoints );

      //LEVEL UP
      if(levelPoints >= pointThreshold){
      utils.log("apply \' threshold superato\'");
        Integer newLevel = i + 1;
        String newLevelString = String.valueOf(newLevel);
        levelPoints = levelPoints - pointThreshold;
        $customData.put("level", newLevelString);
        utils.log("Nuovo Livello: "+newLevelString);
        update($customData);
      }
    
      String newLevelPoints = String.valueOf(levelPoints);
      $customData.put("level_up_points", newLevelPoints);
      utils.log("punti di livello: "+newLevelPoints);

      $bc.getBadgeEarned().add('1-badge-earned');
      update($bc);

      update($customData);
      insert(new AlreadyLevelUp());
 
 
end

rule "five-validations-with-badge"
    when
        Action(id == 'GetsValidatedFiveTimes')
        $bc : BadgeCollectionConcept(name == "trusted contributor", badgeEarned contains '1-badge-earned')
        $GoldCoinsScore : PointConcept(name == "GoldCoins")
        $PointsScore : PointConcept(name == "AccumulatedPoints")
        $customData : CustomData(this["level"] >=5)
 
        not AlreadyLevelUp()
    then

      Double punti = 5.0
      modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
      modify($PointsScore) {setScore($PointsScore.getScore() + punti);}
      String actualLevel = (String)$customData.get("level");  
      String actualPoints = (String)$customData.get("level_up_points");
      Double levelPoints = Double.parseDouble(actualPoints);
      Double myLevel = Double.parseDouble(actualLevel);
      Integer i = Integer.parseInt(actualLevel);


      Double pointThreshold = myLevel*10.0;
      levelPoints = levelPoints + punti;

      utils.log("threshold: "+pointThreshold);
      utils.log("punti di livello: "+levelPoints );

      //LEVEL UP
      if(levelPoints >= pointThreshold){
      utils.log("apply \' threshold superato\'");
        Integer newLevel = i + 1;
        String newLevelString = String.valueOf(newLevel);
        levelPoints = levelPoints - pointThreshold;
        $customData.put("level", newLevelString);
        utils.log("Nuovo Livello: "+newLevelString);
        update($customData);
      }
    
      String newLevelPoints = String.valueOf(levelPoints);
      $customData.put("level_up_points", newLevelPoints);
      utils.log("punti di livello: "+newLevelPoints);

      update($customData);
      insert(new AlreadyLevelUp());
 
 
end

rule "single-validations"
    when
        Action(id == 'GetValidatedOneTime')
        $GoldCoinsScore : PointConcept(name == "GoldCoins")
        $PointsScore : PointConcept(name == "AccumulatedPoints")
        $customData : CustomData(this["level"] >=5)
 
        not AlreadyLevelUp()
    then

      Double punti = 1.0
      modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
      modify($PointsScore) {setScore($PointsScore.getScore() + punti);}
      String actualLevel = (String)$customData.get("level");  
      String actualPoints = (String)$customData.get("level_up_points");
      Double levelPoints = Double.parseDouble(actualPoints);
      Double myLevel = Double.parseDouble(actualLevel);
      Integer i = Integer.parseInt(actualLevel);


      Double pointThreshold = myLevel*10.0;
      levelPoints = levelPoints + punti;

      utils.log("threshold: "+pointThreshold);
      utils.log("punti di livello: "+levelPoints );

      //LEVEL UP
      if(levelPoints >= pointThreshold){
      utils.log("apply \' threshold superato\'");
        Integer newLevel = i + 1;
        String newLevelString = String.valueOf(newLevel);
        levelPoints = levelPoints - pointThreshold;
        $customData.put("level", newLevelString);
        utils.log("Nuovo Livello: "+newLevelString);
        update($customData);
      }
    
      String newLevelPoints = String.valueOf(levelPoints);
      $customData.put("level_up_points", newLevelPoints);
      utils.log("punti di livello: "+newLevelPoints);

      update($customData);
      insert(new AlreadyLevelUp());
 
 
end