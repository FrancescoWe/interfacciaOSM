rule "five-validations-without-badge"
    when
        Action(id == 'GetsValidatedFiveTimes')
        $bc : BadgeCollectionConcept(name == "trusted contributor", badgeEarned not contains '1-badge-earned')
        $GoldCoinsScore : PointConcept(name == "GoldCoins")
        $PointsScore : PointConcept(name == "AccumulatedPoints")
        $customData : CustomData(this["level"] >=5)
 
        not AlreadyLevelUp()
    then

      Double punti = 5.0
      modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
      modify($PointsScore) {setScore($PointsScore.getScore() + punti);}
      String actualLevel = (String)$customData.get("level");  
      String actualPoints = (String)$customData.get("level_up_points");
      Double levelPoints = Double.parseDouble(actualPoints);
      Double myLevel = Double.parseDouble(actualLevel);
      Integer i = Integer.parseInt(actualLevel);


      Double pointThreshold = myLevel*10.0;
      levelPoints = levelPoints + punti;

      utils.log("threshold: "+pointThreshold);
      utils.log("punti di livello: "+levelPoints );

      //LEVEL UP
      if(levelPoints >= pointThreshold){
      utils.log("apply \' threshold superato\'");
        Integer newLevel = i + 1;
        String newLevelString = String.valueOf(newLevel);
        levelPoints = levelPoints - pointThreshold;
        $customData.put("level", newLevelString);
        utils.log("Nuovo Livello: "+newLevelString);
        update($customData);
      }
    
      String newLevelPoints = String.valueOf(levelPoints);
      $customData.put("level_up_points", newLevelPoints);
      utils.log("punti di livello: "+newLevelPoints);

      $bc.getBadgeEarned().add('1-badge-earned');
      update($bc);

      update($customData);
      insert(new AlreadyLevelUp());
 
 
end

rule "five-validations-with-badge"
    when
        Action(id == 'GetsValidatedFiveTimes')
        $bc : BadgeCollectionConcept(name == "trusted contributor", badgeEarned contains '1-badge-earned')
        $GoldCoinsScore : PointConcept(name == "GoldCoins")
        $PointsScore : PointConcept(name == "AccumulatedPoints")
        $customData : CustomData(this["level"] >=5)
 
        not AlreadyLevelUp()
    then

      Double punti = 5.0
      modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
      modify($PointsScore) {setScore($PointsScore.getScore() + punti);}
      String actualLevel = (String)$customData.get("level");  
      String actualPoints = (String)$customData.get("level_up_points");
      Double levelPoints = Double.parseDouble(actualPoints);
      Double myLevel = Double.parseDouble(actualLevel);
      Integer i = Integer.parseInt(actualLevel);


      Double pointThreshold = myLevel*10.0;
      levelPoints = levelPoints + punti;

      utils.log("threshold: "+pointThreshold);
      utils.log("punti di livello: "+levelPoints );

      //LEVEL UP
      if(levelPoints >= pointThreshold){
      utils.log("apply \' threshold superato\'");
        Integer newLevel = i + 1;
        String newLevelString = String.valueOf(newLevel);
        levelPoints = levelPoints - pointThreshold;
        $customData.put("level", newLevelString);
        utils.log("Nuovo Livello: "+newLevelString);
        update($customData);
      }
    
      String newLevelPoints = String.valueOf(levelPoints);
      $customData.put("level_up_points", newLevelPoints);
      utils.log("punti di livello: "+newLevelPoints);

      update($customData);
      insert(new AlreadyLevelUp());
 
 
end

rule "single-validations"
    when
        Action(id == 'GetValidatedOneTime')
        $GoldCoinsScore : PointConcept(name == "GoldCoins")
        $PointsScore : PointConcept(name == "AccumulatedPoints")
        $customData : CustomData(this["level"] >=5)
 
        not AlreadyLevelUp()
    then

      Double punti = 1.0
      modify($GoldCoinsScore){setScore($GoldCoinsScore.getScore() + punti);}
      modify($PointsScore) {setScore($PointsScore.getScore() + punti);}
      String actualLevel = (String)$customData.get("level");  
      String actualPoints = (String)$customData.get("level_up_points");
      Double levelPoints = Double.parseDouble(actualPoints);
      Double myLevel = Double.parseDouble(actualLevel);
      Integer i = Integer.parseInt(actualLevel);


      Double pointThreshold = myLevel*10.0;
      levelPoints = levelPoints + punti;

      utils.log("threshold: "+pointThreshold);
      utils.log("punti di livello: "+levelPoints );

      //LEVEL UP
      if(levelPoints >= pointThreshold){
      utils.log("apply \' threshold superato\'");
        Integer newLevel = i + 1;
        String newLevelString = String.valueOf(newLevel);
        levelPoints = levelPoints - pointThreshold;
        $customData.put("level", newLevelString);
        utils.log("Nuovo Livello: "+newLevelString);
        update($customData);
      }
    
      String newLevelPoints = String.valueOf(levelPoints);
      $customData.put("level_up_points", newLevelPoints);
      utils.log("punti di livello: "+newLevelPoints);

      update($customData);
      insert(new AlreadyLevelUp());
 
 
end
